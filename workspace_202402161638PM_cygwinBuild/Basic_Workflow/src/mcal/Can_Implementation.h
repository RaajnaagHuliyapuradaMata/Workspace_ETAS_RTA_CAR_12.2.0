/*******************************************************************************
 * Autogenerated by MCALgen for CAN V3.0.51.35438: Can_Implementation.h
 *******************************************************************************/
#ifndef CAN_IMPLEMENTATION_H_
#define CAN_IMPLEMENTATION_H_

#define CAN_STD_DATA_LENGTH 8U

#define CAN_MAX_DATA_LENGTH 64U

#define CAN_FRAME_DROPPED 3U
#define PDUIDMAX 65535U

extern uint32 Can_Get_Controller_Index(uint8 CtrlId);
extern void Can_GetVersionInfo_helper(Std_VersionInfoType* VersionInfo);
extern Std_ReturnType Can_DETError(uint32 instanceId, uint32 apiId, uint32 errorId, boolean fromAction);
extern Std_ReturnType Can_CheckBaudrate_helper(uint8 Controller, const uint16 Baudrate);
extern Std_ReturnType Can_ChangeBaudrate_helper(uint8 Controller, const uint16 Baudrate, uint32 ApiId);
extern Std_ReturnType Can_Write_helper(Can_HwHandleType Hth, const Can_PduType* PduInfo, boolean txConfirmFlag, boolean fromAction);
extern Std_ReturnType Can_CheckWakeup_helper(uint8 Controller);
extern Std_ReturnType Can_SetControllerMode_helper(uint8 Controller, Can_ControllerStateType Transition, boolean fromAction);
extern Std_ReturnType Can_GetControllerMode_helper(uint8 Controller, Can_ControllerStateType* ControllerModePtr);
extern void Can_DeInit_helper(void);
extern Std_ReturnType Can_GetControllerErrorState_helper(uint8 Controller, Can_ErrorStateType* ErrorStatePtr);
extern Std_ReturnType Can_injectErrorState(uint8 controller, Can_ErrorStateType errorState);
extern Std_ReturnType Can_GetControllerRxErrorCounter_helper(uint8 ControllerId, uint8* RxErrorCounterPtr);
extern void Can_InjectControllerRxErrorCount(uint8 ControllerId, uint8 RxErrorCount);
extern Std_ReturnType Can_GetControllerTxErrorCounter_helper ( uint8 ControllerId, uint8* TxErrorCounterPtr );
extern void Can_InjectControllerTxErrorCount(uint8 ControllerId, uint8 TxErrorCount);
extern Std_ReturnType Can_injectError(uint8 controller, uint8 errorId);
extern Std_ReturnType Can_GetCurrentTime_helper ( uint8 ControllerId, Can_TimeStampType* timeStampPtr);
extern void Can_InjectCurrentTime(uint8 ControllerId, Can_TimeStampType timeStamp);
extern Std_ReturnType Can_EnableEgressTimeStamp_helper ( Can_HwHandleType Hth);
extern void Can_InjectEnableEgressTimeStamp(Can_HwHandleType Hth, boolean enabled);
extern Std_ReturnType Can_GetEgressTimeStamp_helper ( PduIdType TxPduId, Can_HwHandleType Hth, Can_TimeStampType* timeStampPtr) ;
extern void Can_InjectEgressTimeStamp(PduIdType TxPduId, Can_HwHandleType Hth, Can_TimeStampType timeStamp);
extern Std_ReturnType Can_GetIngressTimeStamp_helper ( Can_HwHandleType Hrh, Can_TimeStampType* timeStampPtr );
extern void Can_InjectIngressTimeStamp(Can_HwHandleType Hrh, Can_TimeStampType timeStamp);
extern void Can_DisableControllerInterrupts_helper(uint8 Controller);
extern void Can_EnableControllerInterrupts_helper(uint8 Controller);


extern void Can_Isr_handler(void);
extern void Can_MainFunction_Write_helper (boolean fromIsr);
extern void Can_MainFunction_Read_helper (boolean fromIsr);
extern void Can_MainFunction_BusOff_helper (boolean fromIsr);
extern void Can_MainFunction_Wakeup_helper (boolean fromIsr);
extern void Can_MainFunction_Mode_helper (void);
extern void Can_InitController_helper(uint8 Controller, const Can_ControllerBaudrateConfigType* Config);
extern Can_DriverStatus Can_Get_Driver_State(void);
extern Std_ReturnType Can_Force_Wakeup(uint8 ControllerId);
extern Std_ReturnType Can_Force_Busoff(uint8 ControllerId);
extern Std_ReturnType Can_Force_Buson(uint8 controller);
extern void Can_Drop_Write_Action_helper(uint8 index, boolean DropWrite);
extern void Can_Drop_Receive_Action_helper(uint8 index, boolean DropReceive);
extern void Can_Inject_Write_helper(uint8 index, Can_HwHandleType Hth, const Can_PduType* PduInfo, boolean txConfirmFlag, boolean fromAction);
extern void Can_Inject_Rxaction_helper(uint8 index, Can_HwHandleType handle, Can_Hwp_Frame* frame);
extern void Can_Init_helper(const Can_ConfigType* configData);
extern Std_ReturnType Can_Enable_Transmit_Processing_helper(uint8 Controller, boolean Enable);

#endif /* CAN_IMPLEMENTATION_H_ */

