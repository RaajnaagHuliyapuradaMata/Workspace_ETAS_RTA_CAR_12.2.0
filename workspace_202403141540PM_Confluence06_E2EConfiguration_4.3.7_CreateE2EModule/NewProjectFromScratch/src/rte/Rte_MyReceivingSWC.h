/** @file     Rte_MyReceivingSWC.h
  *
  * @brief    Application header file
  *
  * @note     AUTOMATICALLY GENERATED FILE! DO NOT EDIT!
  *
  * @note     Generated by ETAS RTA-RTE for Windows
  * @note     Version 12.2.0
  */

#ifndef RTE_MYRECEIVINGSWC_H
#define RTE_MYRECEIVINGSWC_H

#ifndef RTE_CORE
#ifdef RTE_APPLICATION_HEADER_FILE
#error Multiple application header files included.
#endif /* RTE_APPLICATION_HEADER_FILE */
#define RTE_APPLICATION_HEADER_FILE
#endif /* RTE_CORE */

/*******************************************************
 ***
 *** Includes
 ***
 *******************************************************/

#include "Rte.h"
#include "Rte_Intl.h"
#include "Rte_MyReceivingSWC_Type.h"

#include "Rte_DataHandleType.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#if defined(RTE_RUNNABLEAPI_RE_Rx)
   /* Do nothing for this and all elif clauses below (rte_sws_2751) */
#else
   /* None of above defined so define value including all APIs (rte_sws_2751) */
   #define RTE_PRV_ALL_API
#endif

/*******************************************************
 ***
 *** Constants
 ***
 *******************************************************/

#ifndef RTE_CORE
#define RTE_E_NvMService_E_NOT_OK ((Std_ReturnType)1)
#endif /* RTE_CORE */

/*******************************************************
 ***
 *** Public Types
 ***
 *******************************************************/

/* BEGIN: SWC types (core visible) */
struct Rte_PDS_MyReceivingSWC_My_SR_Interface_R {
   uint8 Rte_Dummy;
};
typedef struct Rte_PDS_MyReceivingSWC_My_SR_Interface_R Rte_PDS_MyReceivingSWC_My_SR_Interface_R;
typedef struct Rte_PDS_MyReceivingSWC_My_SR_Interface_R Rte_PDS_MyReceivingSWC_My_SR_Interface_RA[1];
struct Rte_PDS_MyReceivingSWC_NvMService_R {
   Rte_CallFP_MyReceivingSWC_NvMService_EraseBlock               Call_EraseBlock;
   Rte_CallFP_MyReceivingSWC_NvMService_GetDataIndex             Call_GetDataIndex;
   Rte_CallFP_MyReceivingSWC_NvMService_GetErrorStatus           Call_GetErrorStatus;
   Rte_CallFP_MyReceivingSWC_NvMService_InvalidateNvBlock        Call_InvalidateNvBlock;
   Rte_CallFP_MyReceivingSWC_NvMService_ReadBlock                Call_ReadBlock;
   Rte_CallFP_MyReceivingSWC_NvMService_ReadPRAMBlock            Call_ReadPRAMBlock;
   Rte_CallFP_MyReceivingSWC_NvMService_RestoreBlockDefaults     Call_RestoreBlockDefaults;
   Rte_CallFP_MyReceivingSWC_NvMService_RestorePRAMBlockDefaults Call_RestorePRAMBlockDefaults;
   Rte_CallFP_MyReceivingSWC_NvMService_SetDataIndex             Call_SetDataIndex;
   Rte_CallFP_MyReceivingSWC_NvMService_SetRamBlockStatus        Call_SetRamBlockStatus;
   Rte_CallFP_MyReceivingSWC_NvMService_WriteBlock               Call_WriteBlock;
   Rte_CallFP_MyReceivingSWC_NvMService_WritePRAMBlock           Call_WritePRAMBlock;
};
typedef struct Rte_PDS_MyReceivingSWC_NvMService_R Rte_PDS_MyReceivingSWC_NvMService_R;
typedef struct Rte_PDS_MyReceivingSWC_NvMService_R Rte_PDS_MyReceivingSWC_NvMService_RA[1];
struct Rte_CDS_MyReceivingSWC {
   /* Data handles */
   P2VAR(Rte_DE_uint8                             , AUTOMATIC, RTE_DATA) RE_Rx_RPortPrototype_0_DE_MyDataElement;
   /* Per-Instance Memorys (sic) */
   P2VAR(Rte_PimType_MyReceivingSWC_boolean       , AUTOMATIC, RTE_DATA) Pim_PIM_01;
   P2VAR(Rte_PimType_MyReceivingSWC_uint8         , AUTOMATIC, RTE_DATA) Pim_PIM_02;
   /* Port Data Structure Arrays */
   Rte_PDS_MyReceivingSWC_My_SR_Interface_RA RPortPrototype_0;
   Rte_PDS_MyReceivingSWC_NvMService_RA      R_NvMService_0;
};
typedef struct Rte_CDS_MyReceivingSWC Rte_CDS_MyReceivingSWC;
/* END: SWC types (core visible) */

/*******************************************************
 ***
 *** Private Types
 ***
 *******************************************************/

/* BEGIN: SWC types (private) */
#ifndef RTE_CORE
typedef P2CONST(struct Rte_PDS_MyReceivingSWC_My_SR_Interface_R, AUTOMATIC, RTE_CONST) Rte_PortHandle_My_SR_Interface_R;
typedef P2CONST(struct Rte_PDS_MyReceivingSWC_NvMService_R, AUTOMATIC, RTE_CONST) Rte_PortHandle_NvMService_R;
typedef Rte_PimType_MyReceivingSWC_boolean boolean;
typedef Rte_PimType_MyReceivingSWC_uint8 uint8;
#endif /* RTE_CORE */

/* END: SWC types (private) */

/*******************************************************
 ***
 *** Instance Declarations
 ***
 *******************************************************/

#define RTE_START_SEC_CONST_UNSPECIFIED
#include "Rte_MemMap.h"
extern CONST(struct Rte_CDS_MyReceivingSWC, RTE_CONST) Rte_Instance_CPT_MyReceivingSWC_ApplicationEcu;
#define RTE_STOP_SEC_CONST_UNSPECIFIED
#include "Rte_MemMap.h"


#ifndef RTE_CORE
typedef CONSTP2CONST(struct Rte_CDS_MyReceivingSWC, AUTOMATIC, RTE_CONST) Rte_Instance;
#endif /* RTE_CORE */

/*******************************************************
 ***
 *** API Mapping macros
 ***
 *******************************************************/

/* API Mapping Macros */
#ifndef RTE_CORE
#define RTE_START_SEC_VAR_INIT_UNSPECIFIED
#include "Rte_MemMap.h"
extern VAR(Rte_PimType_MyReceivingSWC_boolean, RTE_APPL_DATA) Rte_CPim_CPT_MyReceivingSWC_ApplicationEcu_PIM_01;
#define RTE_STOP_SEC_VAR_INIT_UNSPECIFIED
#include "Rte_MemMap.h"
#define RTE_START_SEC_VAR_INIT_UNSPECIFIED
#include "Rte_MemMap.h"
extern VAR(Rte_PimType_MyReceivingSWC_uint8, RTE_APPL_DATA) Rte_CPim_CPT_MyReceivingSWC_ApplicationEcu_PIM_02;
#define RTE_STOP_SEC_VAR_INIT_UNSPECIFIED
#include "Rte_MemMap.h"
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_Rx)
/* Inline read optimization; Rte_Call_R_NvMService_0_EraseBlock to direct read */
#define Rte_Call_R_NvMService_0_EraseBlock( self )  ( ((VAR(Std_ReturnType, AUTOMATIC))RTE_E_UNCONNECTED) )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_Rx)
/* Inline read optimization; Rte_Call_R_NvMService_0_GetDataIndex to direct read */
#define Rte_Call_R_NvMService_0_GetDataIndex( self, DataIndexPtr )  ( ((VAR(Std_ReturnType, AUTOMATIC))RTE_E_UNCONNECTED) )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_Rx)
/* Inline read optimization; Rte_Call_R_NvMService_0_GetErrorStatus to direct read */
#define Rte_Call_R_NvMService_0_GetErrorStatus( self, RequestResultPtr )  ( ((VAR(Std_ReturnType, AUTOMATIC))RTE_E_UNCONNECTED) )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_Rx)
/* Inline read optimization; Rte_Call_R_NvMService_0_InvalidateNvBlock to direct read */
#define Rte_Call_R_NvMService_0_InvalidateNvBlock( self )  ( ((VAR(Std_ReturnType, AUTOMATIC))RTE_E_UNCONNECTED) )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_Rx)
/* Inline read optimization; Rte_Call_R_NvMService_0_ReadBlock to direct read */
#define Rte_Call_R_NvMService_0_ReadBlock( self, DstPtr )  ( ((VAR(Std_ReturnType, AUTOMATIC))RTE_E_UNCONNECTED) )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_Rx)
/* Inline read optimization; Rte_Call_R_NvMService_0_ReadPRAMBlock to direct read */
#define Rte_Call_R_NvMService_0_ReadPRAMBlock( self )  ( ((VAR(Std_ReturnType, AUTOMATIC))RTE_E_UNCONNECTED) )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_Rx)
/* Inline read optimization; Rte_Call_R_NvMService_0_RestoreBlockDefaults to direct read */
#define Rte_Call_R_NvMService_0_RestoreBlockDefaults( self, DstPtr )  ( ((VAR(Std_ReturnType, AUTOMATIC))RTE_E_UNCONNECTED) )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_Rx)
/* Inline read optimization; Rte_Call_R_NvMService_0_RestorePRAMBlockDefaults to direct read */
#define Rte_Call_R_NvMService_0_RestorePRAMBlockDefaults( self )  ( ((VAR(Std_ReturnType, AUTOMATIC))RTE_E_UNCONNECTED) )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_Rx)
/* Inline read optimization; Rte_Call_R_NvMService_0_SetDataIndex to direct read */
#define Rte_Call_R_NvMService_0_SetDataIndex( self, DataIndex )  ( ((VAR(Std_ReturnType, AUTOMATIC))RTE_E_UNCONNECTED) )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_Rx)
/* Inline read optimization; Rte_Call_R_NvMService_0_SetRamBlockStatus to direct read */
#define Rte_Call_R_NvMService_0_SetRamBlockStatus( self, BlockChanged )  ( ((VAR(Std_ReturnType, AUTOMATIC))RTE_E_UNCONNECTED) )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_Rx)
/* Inline read optimization; Rte_Call_R_NvMService_0_WriteBlock to direct read */
#define Rte_Call_R_NvMService_0_WriteBlock( self, SrcPtr )  ( ((VAR(Std_ReturnType, AUTOMATIC))RTE_E_UNCONNECTED) )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_Rx)
/* Inline read optimization; Rte_Call_R_NvMService_0_WritePRAMBlock to direct read */
#define Rte_Call_R_NvMService_0_WritePRAMBlock( self )  ( ((VAR(Std_ReturnType, AUTOMATIC))RTE_E_UNCONNECTED) )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_Rx)
/* Inline read optimization; Rte_IReadRef_RE_Rx_RPortPrototype_0_DE_MyDataElement to implicit access macro */
#define Rte_IReadRef_RE_Rx_RPortPrototype_0_DE_MyDataElement( self )  ( (P2CONST(uint8, AUTOMATIC, RTE_DATA)) &((self->RE_Rx_RPortPrototype_0_DE_MyDataElement)->value) )
#endif
#if defined(RTE_PRV_ALL_API) || defined(RTE_RUNNABLEAPI_RE_Rx)
/* Inline read optimization; Rte_IRead_RE_Rx_RPortPrototype_0_DE_MyDataElement to implicit access macro */
#define Rte_IRead_RE_Rx_RPortPrototype_0_DE_MyDataElement( self )  ( (CONST(uint8, RTE_DATA)) ((self->RE_Rx_RPortPrototype_0_DE_MyDataElement)->value) )
#endif
/* Inline read optimization; Rte_Pim_PIM_01 to direct read */
#define Rte_Pim_PIM_01( self )  ( (P2VAR(boolean, AUTOMATIC, RTE_APPL_DATA)) &Rte_CPim_CPT_MyReceivingSWC_ApplicationEcu_PIM_01 )
/* Inline read optimization; Rte_Pim_PIM_02 to direct read */
#define Rte_Pim_PIM_02( self )  ( (P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA)) &Rte_CPim_CPT_MyReceivingSWC_ApplicationEcu_PIM_02 )

/* Rte_Port API */
#define Rte_Port_RPortPrototype_0(self) ((Rte_PortHandle_My_SR_Interface_R)&((self)->RPortPrototype_0[0]))
#define Rte_Port_R_NvMService_0(self) ((Rte_PortHandle_NvMService_R)&((self)->R_NvMService_0[0]))

/* Rte_NPorts API */
#define Rte_NPorts_My_SR_Interface_R(self) ((uint8)1)
#define Rte_NPorts_NvMService_R(self) ((uint8)1)

/* Rte_Ports API */
#define Rte_Ports_My_SR_Interface_R(self) ((Rte_PortHandle_My_SR_Interface_R)&((self)->RPortPrototype_0[0]))
#define Rte_Ports_NvMService_R(self) ((Rte_PortHandle_NvMService_R)&((self)->R_NvMService_0[0]))

#endif /* RTE_CORE */

/*******************************************************
 ***
 *** RE Prototypes
 ***
 *******************************************************/

#define MyReceivingSWC_START_SEC_CODE
#include "MyReceivingSWC_MemMap.h"
FUNC(void, MyReceivingSWC_CODE) RE_Rx_func(CONST(Rte_SelfType_MyReceivingSWC, AUTOMATIC) self);
#define MyReceivingSWC_STOP_SEC_CODE
#include "MyReceivingSWC_MemMap.h"

/* Initial values for data element prototypes */

#ifdef __cplusplus
} /* extern C */
#endif /* __cplusplus */

#endif /* !RTE_MYRECEIVINGSWC_H */
