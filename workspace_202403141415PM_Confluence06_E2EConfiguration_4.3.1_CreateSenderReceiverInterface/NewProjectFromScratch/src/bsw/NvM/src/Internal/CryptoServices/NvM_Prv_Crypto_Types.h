/*
 **********************************************************************************************************************
 *
 * COPYRIGHT (c) ETAS GmbH 2019, all rights reserved
 * The reproduction, distribution and utilization of this document as well as the communication of its contents to
 * others without explicit authorization is prohibited. Offenders will be held liable for the payment of damages.
 * All rights reserved in the event of the grant of a patent, utility model or design.
 *
 **********************************************************************************************************************
*/
#ifndef NVM_PRV_CRYPTO_TYPES_H
#define NVM_PRV_CRYPTO_TYPES_H
/*
 **********************************************************************************************************************
 * Includes
 **********************************************************************************************************************
 */

/*
 **********************************************************************************************************************
 * Type definitions
 **********************************************************************************************************************
 */
#if (NVM_CRYPTO_USED == STD_ON)

typedef enum
{
    NvM_Prv_Crypto_idService_Encrypt_e,
    NvM_Prv_Crypto_idService_Decrypt_e,
    NvM_Prv_Crypto_idService_GenerateSignature_e,
    NvM_Prv_Crypto_idService_VerifySignature_e,
    NvM_Prv_Crypto_idService_GenerateMac_e,
    NvM_Prv_Crypto_idService_VerifyMac_e,
    NvM_Prv_Crypto_idService_InitVector_e,

    //-------------------------------------------------------------------------
    // This is actually no cryptographic service ID,
    // in fact this enum value defines count of cryptographic services
    // available in NvM and can be used for array definitions
    //-------------------------------------------------------------------------
    NvM_Prv_Crypto_idService_Count_e

} NvM_Prv_Crypto_idService_ten;

/**
 * Definition of the structure for the block configuration concerning cryptographic services.
 */
typedef struct
{
    /// Pointer to the associated data used for user data authentication.
    uint8 const* dataJobCsmAssociated_pcu8;

    /// Array with Csm job or key IDs for all cryptographic services provided by the NvM.
    /// For cryptographic services definition see NvM_Prv_Crypto_idService_ten.
    uint32 idJobCsm_auo[NvM_Prv_Crypto_idService_Count_e];

    /// Array with primary output lengths in bytes for all cryptographic services provided by the NvM.
    /// For cryptographic services definition see NvM_Prv_Crypto_idService_ten.
    uint16 LengthJobCsm_auo[NvM_Prv_Crypto_idService_Count_e];

    /// Associated data length in bytes used for user data authentication.
    uint16 LengthJobCsmAssociated_uo;

    /// Length of the tag in bytes generated by the Csm for user data authentication.
    /// \attention
    /// It is possible only to autheticate user data without encrypting it.
    uint16 LengthJobCsmTag_uo;

    /// Position of the key initialization vector within internal buffer
    uint16 PositionKeyInitVector;

} NvM_Prv_Crypto_BlockConfig_tst;

#endif  // (NVM_CRYPTO_USED == STD_ON)

/* NVM_PRV_CRYPTO_TYPES_H */
#endif

